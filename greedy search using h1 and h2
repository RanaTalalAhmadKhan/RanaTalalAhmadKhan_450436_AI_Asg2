#include <iostream>
#include <vector>
#include <map>
#include <cmath>
#include <queue>

using namespace std;

// Define the target state (goal state) for the 8-puzzle
vector<vector<int>> targetState = {
    {0, 1, 2},
    {3, 4, 5},
    {6, 7, 8}
};

// Define a struct to represent a node in the puzzle
struct PuzzleNode {
    vector<vector<int>> puzzle; // Configuration of the puzzle
    int blankRow, blankCol;     // Position of the blank tile
    int heuristic;              // Heuristic value
    PuzzleNode* parent;         // Pointer to the parent node

    // Constructor to initialize a puzzle node
    PuzzleNode(const vector<vector<int>>& initialPuzzle, PuzzleNode* parentNode = nullptr)
    {
        puzzle = initialPuzzle;
        parent = parentNode;

        // Find the position of the blank tile in the puzzle
        for (int i = 0; i < 3; ++i) {
            for (int j = 0; j < 3; ++j) {
                if (puzzle[i][j] == 0) {
                    blankRow = i;
                    blankCol = j;
                    break;
                }
            }
        }

        heuristic = calculateHeuristic();
    }

    // Overloaded equality operator for comparing puzzle nodes
    bool operator==(const PuzzleNode& other) const {
        return puzzle == other.puzzle;
    }

    // Overloaded less-than operator for comparing puzzle nodes
    bool operator<(const PuzzleNode& other) const {
        return heuristic > other.heuristic; // Sort in descending order of heuristic for Greedy Search
    }

    // Calculate the heuristic value (Manhattan distance)
    int calculateHeuristic() const {
        int h = 0;
        int value;

        for (int i = 0; i < 3; ++i) {
            for (int j = 0; j < 3; ++j) {
                value = puzzle[i][j];
                if (value != 0) {
                    int targetRow = (value - 1) / 3;
                    int targetCol = (value - 1) % 3;
                    h += abs(i - targetRow) + abs(j - targetCol);
                }
            }
        }
        return h;
    }
};

// Function to solve the 8-puzzle using Greedy Best-First Search
void solvePuzzle(const vector<vector<int>>& initialState, const string& heuristicChoice) {
    // Create the initial puzzle node
    PuzzleNode startNode(initialState);

    // Priority queue to store puzzle nodes based on heuristic value
    priority_queue<PuzzleNode> pq;

    // Map to keep track of visited states
    map<PuzzleNode, bool> visited;

    // Enqueue the start node
    pq.push(startNode);
    visited[startNode] = true;

    // Greedy Best-First Search algorithm
    while (!pq.empty()) {
        // Dequeue the puzzle node with the highest heuristic value
        PuzzleNode currentNode = pq.top();
        pq.pop();

        // Check if the current state is the goal state
        if (currentNode == PuzzleNode(targetState)) {
            // Output the solution path
            cout << "Puzzle Solved!\n";
            while (currentNode.parent != nullptr) {
                cout << "Step:\n";
                for (const auto& row : currentNode.puzzle) {
                    for (int value : row) {
                        cout << value << " ";
                    }
                    cout << endl;
                }
                cout << "\n";

                currentNode = *currentNode.parent;
            }
            return;
        }

        // Possible moves: up, down, left, right
        int moves[][2] = { { -1, 0 }, { 1, 0 }, { 0, -1 }, { 0, 1 } };

        // Generate successors
        for (int i = 0; i < 4; ++i) {
            int newRow = currentNode.blankRow + moves[i][0];
            int newCol = currentNode.blankCol + moves[i][1];

            // Check if the position is valid
            if (newRow >= 0 && newRow < 3 && newCol >= 0 && newCol < 3) {
                // Create a new puzzle node by swapping the blank tile
                PuzzleNode nextNode = currentNode;
                swap(nextNode.puzzle[currentNode.blankRow][currentNode.blankCol],
                     nextNode.puzzle[newRow][newCol]);

                // Check if the new state has not been visited before
                if (!visited[nextNode]) {
                    nextNode.blankRow = newRow;
                    nextNode.blankCol = newCol;
                    nextNode.heuristic = nextNode.calculateHeuristic();

                    // Enqueue the new puzzle node
                    pq.push(nextNode);
                    visited[nextNode] = true;
                }
            }
        }
    }

    cout << "Puzzle Cannot be Solved.\n";
}

// Main function
int main() {
    // Define the given initial state
    vector<vector<int>> initialPuzzle = {
        {8, 0, 6},
        {5, 4, 7},
        {2, 3, 1}
    };

    // Output a welcome message
    cout << "Rana Talal 8-Puzzle Solver with Greedy Best-First Search!\n";

    // Display the given initial puzzle state
    cout << "Given Initial Puzzle State:\n";
    for (const auto& row : initialPuzzle) {
        for (int value : row) {
            cout << value << " ";
        }
        cout << endl;
    }

    // Prompt the user to choose the heuristic
    cout << "Choose the Heuristic: Type 'h1' for Manhattan Distance or 'h2' for Misplaced Tiles.\n";
    string heuristicChoice;
    cin >> heuristicChoice;

    // Output a message indicating the start of the search
    cout << "\nSearching for the Solution...\n\n";

    // Call the function to solve the puzzle with Greedy Best-First Search
    solvePuzzle(initialPuzzle, heuristicChoice);

    return 0; // End of the program
}
